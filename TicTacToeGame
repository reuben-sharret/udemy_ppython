##### TIC-TAC-TOE #####################
## This is version 1.0  of the game ###
## The game works but needs editing ###
## update 1 - fix issues related to tun and player not matching, choosing markers, ending the game

def display_board(board):
    #clear_output()
    #function that prints out a game board
    print(board[7] + '|' + board[8] + '|' + board[9])
    print(board[4] + '|' + board[5] + '|' + board[6])
    print(board[1] + '|' + board[2] + '|' + board[3])   
    
def player_input():
    player_one = 'F'
    player_two = 'F'
    choice = 'F'
    
    while player_one == 'F' and player_two == 'F':
        while not(choice == '1' or choice == '2'):
            choice = input("would you like to be Player 1 or 2? (1,2) ")
    
            if choice not in ['1','2']:
                print("Sorry, but you did not choose a valid selection (1,2)")
            
        if int(choice) == 1:
            player_one = 'X'
            player_two = 'O'
        elif int(choice) == 2:
            player_one = 'O'
            player_two = 'X'
    return player_one, player_two
    
def place_marker(board, marker, position):
    #Write a function that takes in the board list object, a marker ('X' or 'O'), 
    #and a desired position (number 1-9) and assigns it to the board.
    
    board[position] = marker
    
def win_check(board, mark):
    # win conditions:  123,456,789,147,258,369,159,357
    
    if ((board[1] == mark and board[2] == mark and board[3] == mark) or
        (board[4] == mark and board[5] == mark and board[6] == mark) or 
        (board[7] == mark and board[8] == mark and board[9] == mark) or 
        (board[1] == mark and board[4] == mark and board[7] == mark) or 
        (board[2] == mark and board[5] == mark and board[8] == mark) or 
        (board[3] == mark and board[6] == mark and board[9] == mark) or 
        (board[1] == mark and board[5] == mark and board[9] == mark) or 
        (board[3] == mark and board[5] == mark and board[7] == mark)):
        return True
    return False
    
    
import random

def choose_first():
    toss = random.randint(1, 2)
    if toss == 1:
        print("player 1 please go first")
    if toss == 2:
        print("player 2 please go first")
        
def space_check(board, position):
    
    if board[position] == ' ':
        return True
    return False
    
def full_board_check(board):
    
    #for num in range(1,10):
    if ' ' in board:
        return False  #not full
    else:
        return True  #it is full
        
def player_choice(board):
    # Write a function that asks for a player's next position (as a number 1-9) and then uses the 
    # function from step 6 to check if it's a free position. If it is, then return the position for later use.

    choice = -1
    
    while choice not in [1,2,3,4,5,6,7,8,9] :
        choice = input("where would you like to go? (1-9) ")
        
        if choice.isnumeric() == False or int(choice)>10 or space_check(board,int(choice)) == False:
            choice = -1
            print("please choose again")
        else:
            return int(choice)
            
def replay():
    redo = ''
    while redo not in ['Y', 'N']:
        redo = input("would you like to play again? (Y,N) ")
        
        if redo.upper() == 'Y':
            return True
        if redo.upper() == 'N':
            return False
            
from IPython.display import clear_output

print('Welcome to Tic Tac Toe!')
    
while not play_game.upper() == 'Y' or play_game.upper() == 'N':
    play_game = input('ready to play? Y or N? ')
    if choice not in ['X','O','x','o']:
        print("Sorry, but you did not choose a valid selection (X,O)")

    if choice not in ['X','O','x','o']:
        print("Sorry, but you did not choose a valid selection (X,O)")


if play_game.upper() == 'Y':
    game_on = True
else:
    game_on = False

while game_on:
    # Set the game up here

    game_board = ['#',' ',' ',' ',' ',' ',' ',' ',' ',' ']
    display_board(game_board)
    
    (player1_marker,player2_marker) = player_input()    
    print(f'player1 is {player1_marker}')
    print(f'player2 is {player2_marker}')
    turn = choose_first()
    print(f'{turn} gets to go first')
    
    while game_on:
    #Player 1 Turn
        if turn == 'player 1':
            print(f'It is your turn {turn}')
            #check if board is full before selecting position
            if full_board_check(game_board)  == True:
                print("The Board is full. A TIE!!")
                break
            else:
                position = player_choice(game_board)
                place_marker(game_board, player1_marker, position)
                display_board(game_board)
        
            if win_check(game_board, player1_marker) == True:
                print("congrats Player 1!!! YOU WIN!!!")
                break
            else:
                print("player1's turn is over. your turn player2")
                turn = 'player 2'
    # Player2's turn.
        if turn == 'player 2':
            print(f'It is your turn {turn}')
        #check if board is full before selecting position
            if full_board_check(game_board)  == True:
                print("The Board is full. A TIE!!")
                break
            else: 
                position = player_choice(game_board)
                place_marker(game_board, player2_marker, position)
                display_board(game_board)
        
            if win_check(game_board, player2_marker) == True:
                print("congrats Player 2!!! YOU WIN!!!")
                break
            else:
                print("player2's turn is over. your turn player1")
                turn = 'player 1'
    #if not replay():
        #if win_check(game_board, player1_marker) == True or win_check(game_board, player2_marker) == True or full_board_check(game_board)  == True:
    game_on = replay()
    if game_on == True:
        clear_output()
        pass
    else:
        clear_output()
        print('THANK YOU FOR PLAYING.')
        break
